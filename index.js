const fs=require("node:fs"),path=require("node:path");let old_require=require,{execSync}=require("child_process");try{var {token}=require("./config.json")}catch(a){console.error("Please provide a token in the config.json"),process.exit(1)}require=a=>{try{return old_require(a)}catch(c){execSync("npm i "+a+" --force");try{return old_require(a)}catch(b){throw Error("Failed to load module "+a);}}};process.stdout.write("\u001bc");const consola=require("consola");consola.wrapConsole();
const {Client,Collection,Events,GatewayIntentBits}=require("discord.js"),client=new Client({intents:[GatewayIntentBits.Guilds]});client.commands=new Collection;try{var commandFiles=fs.readdirSync(path.join(process.cwd(),"commands")).filter(a=>a.endsWith(".js"))}catch(a){process.stderr.write('Cannot find "commands" folder, create one to continue'),process.exit(1)}0<commandFiles.length?consola.info("Loading "+commandFiles.length+" commands"):consola.warn("No command to load");
for(const a of commandFiles){const c=path.join(path.join(process.cwd(),"commands"),a),b=require(c);"data"in b&&"execute"in b?(client.commands.set(b.data.name,b),consola.info("Loaded /"+b.data.name)):consola.warn(`The command at ${c} is missing a required "data" or "execute" property.`)}consola.success("Loaded "+commandFiles.length+" commands");
try{const a=fs.readdirSync(path.join(process.cwd(),"modules")).filter(b=>b.endsWith(".js"));0<a.length&&consola.info("Loading "+a.length+" modules(addon)");let c=a.map(b=>({name:b,status:"Not loaded"}));for(const b of a){let f=d=>c[c.findIndex(h=>h.name===b)].status=d;const g=path.join(process.cwd(),"modules",b),e=require(g);if("data"in e&&"execute"in e){try{f("Loading"),eval("("+e.execute.toString()+")(client)"),f("Loaded")}catch(d){d.message="Cannot load addon "+e.data.name+" : "+
d.message,f("Error"),consola.error(d)}consola.info("Loaded "+g)}else consola.warn(`The command at ${g} is missing a required "data" or "execute" property.`)}consola.success("Loaded "+a.length+" addons :");console.table(c)}catch(a){}client.once(Events.ClientReady,a=>{consola.success(`Ready! Logged in as ${a.user.tag}`);consola.info("Information :");console.table({...a.user,...a.application})});consola.info("Logging into Discord API...");client.login(token);
